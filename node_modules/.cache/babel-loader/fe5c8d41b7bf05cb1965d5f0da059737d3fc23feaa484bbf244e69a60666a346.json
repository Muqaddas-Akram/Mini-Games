{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Muqaddas\\\\Desktop\\\\My Code\\\\mini-games\\\\mini-games\\\\src\\\\second-game\\\\scratchCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ScratchCardImg from './img/card-image.jpg';\nimport ScratchCardComponent from 'react-scratchcard';\nimport { useMediaQuery } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CustomScratchCard() {\n  _s();\n  const generateRandomContent = () => {\n    return Math.random() > 0.5 ? {\n      content: 'Winner',\n      color: 'green'\n    } : {\n      content: 'Loser',\n      color: 'red'\n    };\n  };\n  const [isGameCompleted, setGameCompleted] = useState(false);\n  const settings = {\n    width: 300,\n    height: 152,\n    image: ScratchCardImg,\n    finishPercent: 50,\n    onTouchMove: e => {\n      e.preventDefault();\n    },\n    onComplete: () => {\n      if (!isGameCompleted) {\n        console.log('The card is now clear!');\n        setGameCompleted(true);\n      }\n    }\n  };\n  const cardContainerStyle = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    marginBottom: '20px'\n  };\n  const cardStyle = {\n    display: 'inline-block',\n    margin: '10px'\n  };\n\n  // Generate content for each card once\n  const generateInitialCards = () => [...Array(6)].map(() => generateRandomContent());\n  const [cards, setCards] = useState(generateInitialCards);\n  const handleNewGame = () => {\n    // Reset cards and trigger a new game\n    setCards(generateInitialCards);\n    // Reload the page\n    window.location.reload();\n  };\n\n  // Responsive breakpoints\n  const isSmallScreen = useMediaQuery('(max-width:600px)');\n  const isMediumScreen = useMediaQuery('(max-width:900px)');\n\n  // Adjust card size based on screen size\n  const cardSettings = {\n    width: isSmallScreen ? 200 : isMediumScreen ? 250 : 300,\n    height: isSmallScreen ? 106 : isMediumScreen ? 152 : 152\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center',\n        color: '#4caf50'\n      },\n      children: \"Scratch the Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardContainerStyle,\n      children: cards.slice(0, 3).map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(ScratchCardComponent, {\n          ...settings,\n          width: cardSettings.width,\n          height: cardSettings.height,\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              textAlign: 'center',\n              color: card.color\n            },\n            children: card.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: cardContainerStyle,\n      children: cards.slice(3).map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: cardStyle,\n        children: /*#__PURE__*/_jsxDEV(ScratchCardComponent, {\n          ...settings,\n          width: cardSettings.width,\n          height: cardSettings.height,\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            style: {\n              textAlign: 'center',\n              color: card.color\n            },\n            children: card.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, index + 3, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNewGame,\n        style: {\n          padding: '10px 20px',\n          fontSize: '16px',\n          backgroundColor: '#4caf50',\n          color: '#fff',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          outline: 'none',\n          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n          width: '100%',\n          maxWidth: '200px',\n          margin: '0 auto'\n        },\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(CustomScratchCard, \"nj9iMrWgRtahhpLrf1hBrzB3iDs=\", false, function () {\n  return [useMediaQuery, useMediaQuery];\n});\n_c = CustomScratchCard;\nexport default CustomScratchCard;\nvar _c;\n$RefreshReg$(_c, \"CustomScratchCard\");","map":{"version":3,"names":["React","useState","ScratchCardImg","ScratchCardComponent","useMediaQuery","jsxDEV","_jsxDEV","CustomScratchCard","_s","generateRandomContent","Math","random","content","color","isGameCompleted","setGameCompleted","settings","width","height","image","finishPercent","onTouchMove","e","preventDefault","onComplete","console","log","cardContainerStyle","display","flexWrap","justifyContent","marginBottom","cardStyle","margin","generateInitialCards","Array","map","cards","setCards","handleNewGame","window","location","reload","isSmallScreen","isMediumScreen","cardSettings","children","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","slice","card","index","marginTop","onClick","padding","fontSize","backgroundColor","border","borderRadius","cursor","outline","boxShadow","maxWidth","_c","$RefreshReg$"],"sources":["C:/Users/Muqaddas/Desktop/My Code/mini-games/mini-games/src/second-game/scratchCard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ScratchCardImg from './img/card-image.jpg';\nimport ScratchCardComponent from 'react-scratchcard';\nimport { useMediaQuery } from '@mui/material';\n\nfunction CustomScratchCard() {\n  const generateRandomContent = () => {\n    return Math.random() > 0.5 ? { content: 'Winner', color: 'green' } : { content: 'Loser', color: 'red' };\n  };\n\n  const [isGameCompleted, setGameCompleted] = useState(false);\n\n  const settings = {\n    width: 300,\n    height: 152,\n    image: ScratchCardImg,\n    finishPercent: 50,\n    onTouchMove: (e) => {\n      e.preventDefault();\n    },\n    onComplete: () => {\n      if (!isGameCompleted) {\n        console.log('The card is now clear!');\n        setGameCompleted(true);\n      }\n    },\n  };\n\n  const cardContainerStyle = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n    marginBottom: '20px',\n  };\n\n  const cardStyle = {\n    display: 'inline-block',\n    margin: '10px',\n  };\n\n  // Generate content for each card once\n  const generateInitialCards = () => [...Array(6)].map(() => generateRandomContent());\n  const [cards, setCards] = useState(generateInitialCards);\n\n  const handleNewGame = () => {\n    // Reset cards and trigger a new game\n    setCards(generateInitialCards);\n    // Reload the page\n    window.location.reload();\n  };\n\n  // Responsive breakpoints\n  const isSmallScreen = useMediaQuery('(max-width:600px)');\n  const isMediumScreen = useMediaQuery('(max-width:900px)');\n\n  // Adjust card size based on screen size\n  const cardSettings = {\n    width: isSmallScreen ? 200 : isMediumScreen ? 250 : 300,\n    height: isSmallScreen ? 106 : isMediumScreen ? 152 : 152,\n  };\n\n  return (\n    <div>\n      <h1 style={{ textAlign: 'center', color: '#4caf50' }}>Scratch the Cards</h1>\n\n      <div style={cardContainerStyle}>\n        {cards.slice(0, 3).map((card, index) => (\n          <div style={cardStyle} key={index}>\n            <ScratchCardComponent {...settings} width={cardSettings.width} height={cardSettings.height}>\n              <h1 style={{ textAlign: 'center', color: card.color }}>{card.content}</h1>\n            </ScratchCardComponent>\n          </div>\n        ))}\n      </div>\n\n      <div style={cardContainerStyle}>\n        {cards.slice(3).map((card, index) => (\n          <div style={cardStyle} key={index + 3}>\n            <ScratchCardComponent {...settings} width={cardSettings.width} height={cardSettings.height}>\n              <h1 style={{ textAlign: 'center', color: card.color }}>{card.content}</h1>\n            </ScratchCardComponent>\n          </div>\n        ))}\n      </div>\n\n      <div style={{ textAlign: 'center', marginTop: '20px' }}>\n        <button\n          onClick={handleNewGame}\n          style={{\n            padding: '10px 20px',\n            fontSize: '16px',\n            backgroundColor: '#4caf50',\n            color: '#fff',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n            outline: 'none',\n            boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n            width: '100%',\n            maxWidth: '200px',\n            margin: '0 auto',\n          }}\n        >\n          New Game\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default CustomScratchCard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}